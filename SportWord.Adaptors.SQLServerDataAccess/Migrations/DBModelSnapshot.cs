// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportWord.Adaptors.SQLServerDataAccess.Contexts;

namespace SportWord.Adaptors.SQLServerDataAccess.Migrations
{
    [DbContext(typeof(DB))]
    partial class DBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("SportWord.Core.Domain.Models.Carrito", b =>
                {
                    b.Property<Guid>("carrito_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("carrito_id");

                    b.ToTable("Carrito");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Carrito_Productos", b =>
                {
                    b.Property<Guid>("producto_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("carrito_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("producto_id", "carrito_id");

                    b.HasIndex("carrito_id");

                    b.ToTable("Carrito_Productos");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Categorias", b =>
                {
                    b.Property<Guid>("categoria_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoria_id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Compra", b =>
                {
                    b.Property<Guid>("compra_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha_compra")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Usersusuario_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("producto_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("total")
                        .HasColumnType("float");

                    b.Property<string>("usuario_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("compra_id");

                    b.HasIndex("Usersusuario_id");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Productos", b =>
                {
                    b.Property<Guid>("producto_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("precio")
                        .HasColumnType("float");

                    b.Property<Guid?>("promocion_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("stock")
                        .HasColumnType("int");

                    b.HasKey("producto_id");

                    b.HasIndex("promocion_id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Productos_Categorias", b =>
                {
                    b.Property<Guid>("producto_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("categoria_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("producto_id", "categoria_id");

                    b.HasIndex("categoria_id");

                    b.ToTable("Productos_Categorias");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Promocion", b =>
                {
                    b.Property<Guid>("promocion_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("producto_id")
                        .HasColumnType("int");

                    b.Property<string>("titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("promocion_id");

                    b.ToTable("Promocion");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Tiendas", b =>
                {
                    b.Property<Guid>("tienda_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tienda_id");

                    b.ToTable("Tiendas");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.User", b =>
                {
                    b.Property<Guid>("usuario_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuario_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("usuario_id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.User_Producto", b =>
                {
                    b.Property<Guid>("usuario_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("producto_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("usuario_id", "producto_id");

                    b.HasIndex("producto_id");

                    b.ToTable("User_Producto");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.User_Tienda", b =>
                {
                    b.Property<Guid>("usuario_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("tienda_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Userusuario_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("usuario_id", "tienda_id");

                    b.HasIndex("Userusuario_id");

                    b.ToTable("User_Tienda");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Carrito_Productos", b =>
                {
                    b.HasOne("SportWord.Core.Domain.Models.Productos", "Productos")
                        .WithMany("carrito_productos")
                        .HasForeignKey("carrito_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportWord.Core.Domain.Models.Carrito", "Carrito")
                        .WithMany("carrito_productos")
                        .HasForeignKey("producto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Compra", b =>
                {
                    b.HasOne("SportWord.Core.Domain.Models.User", "Users")
                        .WithMany("Compras")
                        .HasForeignKey("Usersusuario_id");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Productos", b =>
                {
                    b.HasOne("SportWord.Core.Domain.Models.Promocion", "Promocion")
                        .WithMany("Productos")
                        .HasForeignKey("promocion_id");

                    b.Navigation("Promocion");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Productos_Categorias", b =>
                {
                    b.HasOne("SportWord.Core.Domain.Models.Categorias", "Categorias")
                        .WithMany("Productos_Categorias")
                        .HasForeignKey("categoria_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportWord.Core.Domain.Models.Productos", "Productos")
                        .WithMany("productos_Categorias")
                        .HasForeignKey("producto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.User_Producto", b =>
                {
                    b.HasOne("SportWord.Core.Domain.Models.Productos", "Productos")
                        .WithMany("user_producto")
                        .HasForeignKey("producto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportWord.Core.Domain.Models.User", "User")
                        .WithMany("user_producto")
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Productos");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.User_Tienda", b =>
                {
                    b.HasOne("SportWord.Core.Domain.Models.User", "User")
                        .WithMany("User_Tienda")
                        .HasForeignKey("Userusuario_id");

                    b.HasOne("SportWord.Core.Domain.Models.Tiendas", "Tiendas")
                        .WithMany("User_Tienda")
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tiendas");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Carrito", b =>
                {
                    b.Navigation("carrito_productos");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Categorias", b =>
                {
                    b.Navigation("Productos_Categorias");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Productos", b =>
                {
                    b.Navigation("carrito_productos");

                    b.Navigation("productos_Categorias");

                    b.Navigation("user_producto");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Promocion", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.Tiendas", b =>
                {
                    b.Navigation("User_Tienda");
                });

            modelBuilder.Entity("SportWord.Core.Domain.Models.User", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("user_producto");

                    b.Navigation("User_Tienda");
                });
#pragma warning restore 612, 618
        }
    }
}
